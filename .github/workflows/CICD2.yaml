name: CI/CD Pipeline for k0s

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: httpd
  KUBE_NAMESPACE: default
  DEPLOYMENT_NAME: html-app
  CONTAINER_NAME: nginx

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Paso 1-4: Sin cambios (Checkout, Docker login, Build, kubectl install)

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Descarga todo el historial

      # Paso 2: Configurar Docker/login (si lo necesitas)
      # ... (tus otros pasos actuales) ...

      # Paso 5: Configurar kubeconfig (¡CAMBIOS AQUÍ!)
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          # Establecer el contexto EXPLÍCITAMENTE
          #kubectl config use-context k0s  # ¡Asegúrate que coincida con tu kubeconfig!
          # Verificaciones de debug
          #kubectl config current-context
          kubectl cluster-info
          kubectl get nodes
      - name: verificacion
        run: |
          echo "Directorio actual: $(pwd)"
          ls -la
      # Paso 6: Desplegar en Kubernetes (¡CAMBIOS AQUÍ!)
      - name: Deploy to Kubernetes
        run: |
          # 1. Establecer contexto y namespace
          kubectl config use-context k0s  # ¡Repetir por seguridad!
          kubectl config set-context --current --namespace=$KUBE_NAMESPACE
          
          # 2. Debug: Verificar contexto y namespace
          echo "Contexto actual:"
          kubectl config current-context
          echo "Namespace actual:"
          kubectl config view --minify --output 'jsonpath={..namespace}'
          
          # 3. Aplicar los archivos YAML
          kubectl apply -f $GITHUB_WORKSPACE/deployment.yaml -f $GITHUB_WORKSPACE/service.yaml
          
          # 4. Actualizar la imagen
          kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$DOCKER_IMAGE:${{ github.sha }} --record
          
          # 5. Verificar el despliegue
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get pods -n $KUBE_NAMESPACE  # Debug adicional
